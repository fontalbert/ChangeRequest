

















// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Web.config"
//     Connection String Name: "SiteSqlServer"
//     Connection String:      "Data Source=disgrafic-vm02\sql2016;Initial Catalog=dg05_Dnn911;User ID=dnn;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise





// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;


namespace Margin.Modules.ChangeRequest.Data
{

    using System.Collections.Generic;

    using System.Data.Entity;

    using System.Linq;




    #region Database context



    public partial class ModuleContext : DbContext, IModuleContext
    {

        public System.Data.Entity.DbSet<ChangeRequest> ChangeRequest { get; set; } // Arv_ChangeRequest


        public System.Data.Entity.DbSet<Users> Users { get; set; } // Users



        static ModuleContext()
        {

            System.Data.Entity.Database.SetInitializer<ModuleContext>(null);

        }

        public ModuleContext()
            : base("Name=SiteSqlServer")
        {
            InitializePartial();

        }

        public ModuleContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();

        }

        public ModuleContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();

        }

        public ModuleContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();

        }

        public ModuleContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();

        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }


        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }


        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);



            modelBuilder.Configurations.Add(new ChangeRequestConfiguration());

            modelBuilder.Configurations.Add(new UsersConfiguration());



            OnModelCreatingPartial(modelBuilder);

        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {

            modelBuilder.Configurations.Add(new ChangeRequestConfiguration(schema));

            modelBuilder.Configurations.Add(new UsersConfiguration(schema));

            return modelBuilder;
        }


        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

    }

    #endregion



    #region Fake Database context



    public partial class FakeModuleContext : IModuleContext
    {

        public System.Data.Entity.DbSet<ChangeRequest> ChangeRequest { get; set; }

        public System.Data.Entity.DbSet<Users> Users { get; set; }


        public FakeModuleContext()
        {

            ChangeRequest = new FakeDbSet<ChangeRequest>("Id");

            Users = new FakeDbSet<Users>("UserID");



            InitializePartial();
        }


        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }


        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }



        partial void InitializePartial();


        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


    }



    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx

    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();


            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();


            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }


        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }


        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {

            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }

        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }


        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }



        partial void InitializePartial();
    }



    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }


    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }


    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }



    #endregion


    #region POCO classes




    // Arv_ChangeRequest



    public partial class ChangeRequest
    {


        [Column(@"Id", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)


        [Required]
        [MaxLength(150)]
        [StringLength(150)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 150)


        [Display(Name = "Description")]
        public string Description { get; set; } // Description


        [Display(Name = "Justification")]
        public string Justification { get; set; } // Justification


        [Display(Name = "Impact")]
        public string Impact { get; set; } // Impact


        [Required]
        [Display(Name = "Request date")]
        public System.DateTime RequestDate { get; set; } // RequestDate


        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Request by")]
        public string RequestBy { get; set; } // RequestBy (length: 50)


        [Required]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Status")]
        public string Status { get; set; } // Status (length: 20)


        [Required]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Priority")]
        public string Priority { get; set; } // Priority (length: 20)


        [Required]
        [Display(Name = "Cru ser")]
        public int CRUser { get; set; } // CRUser


        [Required]
        [Display(Name = "Crd ate")]
        public System.DateTime CRDate { get; set; } // CRDate


        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Crip")]
        public string CRIP { get; set; } // CRIP (length: 50)


        [Required]
        [Display(Name = "Lmu ser")]
        public int LMUser { get; set; } // LMUser


        [Required]
        [Display(Name = "Lmd ate")]
        public System.DateTime LMDate { get; set; } // LMDate


        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Lmip")]
        public string LMIP { get; set; } // LMIP (length: 50)


        [MaxLength(150)]
        [StringLength(150)]
        [Display(Name = "New column")]
        public string NewColumn { get; set; } // NewColumn (length: 150)





        public ChangeRequest()
        {


            InitializePartial();
        }


        partial void InitializePartial();

    }



    // Users



    public partial class Users
    {


        [Column(@"UserID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "User ID")]
        public int UserID { get; set; } // UserID (Primary key)


        [Required]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Username")]
        public string Username { get; set; } // Username (length: 100)


        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 50)


        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 50)


        [Required]
        [Display(Name = "Is super user")]
        public bool IsSuperUser { get; set; } // IsSuperUser


        [Display(Name = "Affiliate ID")]
        public int? AffiliateId { get; set; } // AffiliateId


        [MaxLength(256)]
        [StringLength(256)]
        [Display(Name = "Email")]
        public string Email { get; set; } // Email (length: 256)


        [Required]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Display name")]
        public string DisplayName { get; set; } // DisplayName (length: 128)


        [Required]
        [Display(Name = "Update password")]
        public bool UpdatePassword { get; set; } // UpdatePassword


        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Last ipa ddress")]
        public string LastIPAddress { get; set; } // LastIPAddress (length: 50)


        [Required]
        [Display(Name = "Is deleted")]
        public bool IsDeleted { get; set; } // IsDeleted


        [Display(Name = "Created by user ID")]
        public int? CreatedByUserID { get; set; } // CreatedByUserID


        [Display(Name = "Created on date")]
        public System.DateTime? CreatedOnDate { get; set; } // CreatedOnDate


        [Display(Name = "Last modified by user ID")]
        public int? LastModifiedByUserID { get; set; } // LastModifiedByUserID


        [Display(Name = "Last modified on date")]
        public System.DateTime? LastModifiedOnDate { get; set; } // LastModifiedOnDate


        [Display(Name = "Password reset token")]
        public System.Guid? PasswordResetToken { get; set; } // PasswordResetToken


        [Display(Name = "Password reset expiration")]
        public System.DateTime? PasswordResetExpiration { get; set; } // PasswordResetExpiration


        [MaxLength(256)]
        [StringLength(256)]
        [Display(Name = "Lower email")]
        public string LowerEmail { get; private set; } // LowerEmail (length: 256)





        public Users()
        {

            IsSuperUser = false;

            DisplayName = "";

            UpdatePassword = false;

            IsDeleted = false;


            InitializePartial();
        }


        partial void InitializePartial();

    }


    #endregion


    #region POCO Configuration



    // Arv_ChangeRequest


    public partial class ChangeRequestConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ChangeRequest>
    {
        public ChangeRequestConfiguration()
            : this("dbo")
        {
        }

        public ChangeRequestConfiguration(string schema)
        {

            ToTable("Arv_ChangeRequest", schema);


            Property(x => x.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar");

            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();

            Property(x => x.Justification).HasColumnName(@"Justification").HasColumnType("nvarchar(max)").IsOptional();

            Property(x => x.Impact).HasColumnName(@"Impact").HasColumnType("nvarchar(max)").IsOptional();

            Property(x => x.RequestDate).HasColumnName(@"RequestDate").HasColumnType("datetime");

            Property(x => x.RequestBy).HasColumnName(@"RequestBy").HasColumnType("nvarchar");

            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar");

            Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("nvarchar");

            Property(x => x.CRUser).HasColumnName(@"CRUser").HasColumnType("int");

            Property(x => x.CRDate).HasColumnName(@"CRDate").HasColumnType("datetime");

            Property(x => x.CRIP).HasColumnName(@"CRIP").HasColumnType("nvarchar");

            Property(x => x.LMUser).HasColumnName(@"LMUser").HasColumnType("int");

            Property(x => x.LMDate).HasColumnName(@"LMDate").HasColumnType("datetime");

            Property(x => x.LMIP).HasColumnName(@"LMIP").HasColumnType("nvarchar");

            Property(x => x.NewColumn).HasColumnName(@"NewColumn").HasColumnType("nvarchar").IsOptional();




            InitializePartial();
        }

        partial void InitializePartial();
    }


    // Users


    public partial class UsersConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Users>
    {
        public UsersConfiguration()
            : this("dbo")
        {
        }

        public UsersConfiguration(string schema)
        {

            ToTable("Users", schema);


            Property(x => x.UserID).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar");

            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar");

            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar");

            Property(x => x.IsSuperUser).HasColumnName(@"IsSuperUser").HasColumnType("bit");

            Property(x => x.AffiliateId).HasColumnName(@"AffiliateId").HasColumnType("int").IsOptional();

            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional();

            Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar");

            Property(x => x.UpdatePassword).HasColumnName(@"UpdatePassword").HasColumnType("bit");

            Property(x => x.LastIPAddress).HasColumnName(@"LastIPAddress").HasColumnType("nvarchar").IsOptional();

            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit");

            Property(x => x.CreatedByUserID).HasColumnName(@"CreatedByUserID").HasColumnType("int").IsOptional();

            Property(x => x.CreatedOnDate).HasColumnName(@"CreatedOnDate").HasColumnType("datetime").IsOptional();

            Property(x => x.LastModifiedByUserID).HasColumnName(@"LastModifiedByUserID").HasColumnType("int").IsOptional();

            Property(x => x.LastModifiedOnDate).HasColumnName(@"LastModifiedOnDate").HasColumnType("datetime").IsOptional();

            Property(x => x.PasswordResetToken).HasColumnName(@"PasswordResetToken").HasColumnType("uniqueidentifier").IsOptional();

            Property(x => x.PasswordResetExpiration).HasColumnName(@"PasswordResetExpiration").HasColumnType("datetime").IsOptional();

            Property(x => x.LowerEmail).HasColumnName(@"LowerEmail").HasColumnType("nvarchar").IsOptional().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);




            InitializePartial();
        }

        partial void InitializePartial();
    }


    #endregion



}
// </auto-generated>


